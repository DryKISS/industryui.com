{"version":3,"sources":["../../components/icons/wrapper.js"],"names":["React","styled","css","IconWrapper","children","colour","disabled","disabledColour","hoverColour","onClick","size","translate","props","mainSize","tmpSize","scale","Number","states","DEFAULT","HOVER","setColour","state","ICONS","theme","disabledIconColour","defaultIconColour","hoverIconColour","defaultColour","StyledSvg","svg"],"mappings":"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","sourcesContent":["/**\n * Components - Icons - Wrapper\n */\n\n// React\nimport React from 'react'\n\n// Style\nimport styled, { css } from 'styled-components'\n\nexport const IconWrapper = ({\n  children,\n  colour,\n  disabled,\n  disabledColour,\n  hoverColour,\n  onClick,\n  size,\n  translate,\n  ...props\n}) => {\n  const { mainSize } = props\n\n  if (typeof size === 'string') {\n    let tmpSize = 22\n\n    switch (size) {\n      case 'xxxs':\n        tmpSize = 8\n        break\n      case 'xxs':\n        tmpSize = 12\n        break\n      case 'xs':\n        tmpSize = 16\n        break\n      case 'sm':\n        tmpSize = 20\n        break\n      case 'md':\n        tmpSize = 24\n        break\n      case 'lg':\n        tmpSize = 32\n        break\n      case 'xl':\n        tmpSize = 36\n        break\n      case 'xxl':\n        tmpSize = 40\n        break\n      case 'xxxl':\n        tmpSize = 48\n        break\n      default:\n        tmpSize = 22\n        break\n    }\n    size = tmpSize\n  } else {\n    size = size || 22\n  }\n\n  let scale = 1\n\n  if (mainSize && size !== mainSize) {\n    scale = Number(size / mainSize)\n  }\n\n  return (\n    <StyledSvg\n      colour={colour}\n      disabled={disabled}\n      disabledColour={disabledColour}\n      hoverColour={hoverColour}\n      onClick={onClick}\n      scale={scale}\n      size={size}\n      translate={translate}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}>\n      {children}\n    </StyledSvg>\n  )\n}\n\nconst states = {\n  DEFAULT: 'default',\n  HOVER: 'hover'\n}\n\nconst setColour = (state, props) => {\n  let {\n    colour,\n    disabled,\n    disabledColour,\n    hoverColour,\n    theme: { ICONS }\n  } = props\n\n  if (state === states.DEFAULT) {\n    return disabled && disabledColour\n      ? disabledColour\n      : disabled\n      ? ICONS.disabledIconColour\n      : colour || ICONS.defaultIconColour\n  }\n\n  if (state === states.HOVER && hoverColour) {\n    if (hoverColour === true) {\n      hoverColour = ICONS.hoverIconColour\n    }\n\n    return disabled && disabledColour\n      ? disabledColour\n      : disabled\n      ? ICONS.disabledIconColour\n      : hoverColour || ICONS.hoverIconColour || ICONS.defaultIconColour\n  }\n\n  if (disabled) {\n    return disabledColour || ICONS.disabledIconColour\n  }\n\n  return colour || ICONS.defaultColour\n}\n\nconst StyledSvg = styled.svg`\n  ${({ size }) => {\n    if (typeof size === 'number') {\n      return css`\n        height: ${size}px;\n        width: ${size}px;\n      `\n    }\n  }}\n\n  path {\n    transition: fill 0.2s ease;\n    fill: ${(props) => setColour(states.DEFAULT, props)};\n    ${({ scale, translate }) => {\n      return (\n        scale &&\n        css`\n          transform: scale(${scale}) ${translate || ''};\n        `\n      )\n    }}\n  }\n  &:hover {\n    path {\n      fill: ${(props) => setColour(states.HOVER, props)};\n    }\n  }\n  ${({ onClick, disabled }) =>\n    onClick &&\n    !disabled &&\n    css`\n      cursor: pointer;\n    `}\n`\n"],"file":"wrapper.js"}